//
//  PXFreestyleBuiltInSource.m
//  pixate-freestyle
//
//  Created by Kevin Lindsey on 4/17/14.
//  Copyright (c) 2014 Pixate, Inc. All rights reserved.
//

#import "PXFreestyleBuiltInSource.h"

@implementation PXFreestyleBuiltInSource

+ (NSString *)emaSource
{
    return @"//\n"
        "// empty file\n"
        "//\n";
}

+ (NSString *)emSource
{
    return @"//\n"
        "// Named Color Constants\n"
        "//\n"
        "sym black    = rgb(  0,   0,   0);\n"
        "sym blue     = rgb(  0,   0, 255);\n"
        "sym darkGrey = rgb(169, 169, 169);\n"
        "sym green    = rgb(  0, 128,   0);\n"
        "sym orange   = rgb(255, 165,   0);\n"
        "sym red      = rgb(255,   0,   0);\n"
        "sym white    = rgb(255, 255, 255);\n"
        "sym yellow   = rgb(255, 255,   0);\n"
        "\n"
        "//\n"
        "// Color Functions\n"
        "//\n"
        "\n"
        "//\n"
        "// Create an 'rgba' object using the specified values. The red, green, and blue\n"
        "// values are expected to be integers in the closed interval [0,255]. The alpha\n"
        "// channel is set to 1.0.\n"
        "//\n"
        "func rgb(red, green, blue) {\n"
        "  {\n"
        "    type: 'rgba',\n"
        "    red: red,\n"
        "    green: green,\n"
        "    blue: blue,\n"
        "    alpha: 1.0\n"
        "  };\n"
        "}\n"
        "\n"
        "//\n"
        "// Create an 'rgba' object using the specified values. The red, green, and blue\n"
        "// values are expected to be integers in the closed interval [0,255]. The alpha\n"
        "// value is expected to be a double in the closed interval [0,1].\n"
        "func rgba(red, green, blue, alpha) {\n"
        "  {\n"
        "    type: 'rgba',\n"
        "    red: red,\n"
        "    green: green,\n"
        "    blue: blue,\n"
        "    alpha: alpha\n"
        "  };\n"
        "}\n"
        "\n"
        "//\n"
        "// Create an 'hsla' object using the specified values. The hue value is expected to\n"
        "// be an angle in degrees. Saturation, and lightness values are expected to be\n"
        "// doubles in the closed interval [0,1]. The alpha channel is set to 1.0.\n"
        "//\n"
        "func hsl(hue, saturation, lightness) {\n"
        "  {\n"
        "    type: 'hsla',\n"
        "    hue: hue,\n"
        "    saturation: saturation,\n"
        "    lightness: lightness,\n"
        "    alpha: 1.0\n"
        "  };\n"
        "}\n"
        "\n"
        "//\n"
        "// Create an 'hsla' object using the specified values. The hue value is expected to\n"
        "// be an angle in degrees. Saturation, lightness, and alpha values are expected to\n"
        "// be doubles in the closed interval [0,1]\n"
        "//\n"
        "func hsla(hue, saturation, lightness, alpha) {\n"
        "  {\n"
        "    type: 'hsla',\n"
        "    hue: hue,\n"
        "    saturation: saturation,\n"
        "    lightness: lightness,\n"
        "    alpha: alpha\n"
        "  };\n"
        "}\n"
        "\n"
        "//\n"
        "// Create an 'hsba' object using the specified values. The hue value is expected to\n"
        "// be an angle in degrees. Saturation, and brightness values are expected to be\n"
        "// doubles in the closed interval [0,1]. The alpha channel is set to 1.0.\n"
        "//\n"
        "func hsb(hue, saturation, brightness) {\n"
        "  {\n"
        "    type: 'hsba',\n"
        "    hue: hue,\n"
        "    saturation: saturation,\n"
        "    brightness: brightness,\n"
        "    alpha: 1.0\n"
        "  };\n"
        "}\n"
        "\n"
        "//\n"
        "// Create an 'hsba' object using the specified values. The hue value is expected to\n"
        "// be an angle in degrees. Saturation, brightness, and alpha values are expected to\n"
        "// be doubles in the closed interval [0,1]\n"
        "//\n"
        "func hsba(hue, saturation, brightness, alpha) {\n"
        "  {\n"
        "    type: 'hsba',\n"
        "    hue: hue,\n"
        "    saturation: saturation,\n"
        "    brightness: brightness,\n"
        "    alpha: alpha\n"
        "  };\n"
        "}\n";
}

@end
